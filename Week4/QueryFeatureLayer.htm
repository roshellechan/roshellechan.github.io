<html>
<head>
  <meta name="description" content="ArcGIS JavaScript Tutorials: Query a feature layer">
  <meta charset="utf-8">
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
  <title>ArcGIS JavaScript Tutorials: Query a feature layer</title>
  
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>

  
  <style>
    html, body, #viewDiv {
      padding: 0;
      margin: 0;
      height: 100%;
      width: 100%;
    }

    h1 {
          font-size: 26px;
          margin-bottom: 2%;
          margin-top: 2%;
          }
      
      p {
          margin-bottom: 0;
      }
      
      ul {
          margin-bottom: 5%;
      }
    
      .page-footer {
        font-size: 14px;
        background-color: whitesmoke;
        margin-top: 3%;
      }
          .container {
            margin-bottom:3%;
        }
  </style>
  <link rel="stylesheet" href="https://js.arcgis.com/4.13/esri/css/main.css">
  <script src="https://js.arcgis.com/4.13/"></script>
</head>

<script>
  require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/FeatureLayer",
      "esri/layers/GraphicsLayer",
      "esri/Graphic"
    ],
    function(
      Map, MapView, FeatureLayer, GraphicsLayer, Graphic
    ) {

      var map = new Map({
        basemap: "topo-vector"
      });
    
      var view = new MapView({
        container: "viewDiv",
        map: map,
        center: [-118.80543,34.02700],
        zoom: 13
      });
      
      //*** CHALLENGE ***//
      var sql = "TRL_NAME like '%Canyon%'";

      view.when(function(){
        //*** ADD ***//
        // queryFeatureLayer(view.center, 1500, "intersects")
        queryFeatureLayerView(view.center, 1500, "intersects")
        
        //*** CHALLENGE ***//
        //queryFeatureLayer(view.center, 1500, "intersects", sql)
        //queryFeatureLayerView(view.center, 1500, "intersects", sql)
      });

      view.on("click", function(event){
        //*** ADD ***//
        queryFeatureLayer(event.mapPoint, 1500, "intersects")
        //queryFeatureLayerView(event.mapPoint, 1500, "intersects");
        
        //*** CHALLENGE ***//
        // queryFeatureLayer(event.mapPoint, 1500, "intersects", sql)
        queryFeatureLayerView(event.mapPoint, 1500, "intersects", sql)
      });

    
      // Reference the feature layer to query
 
      var featureLayer = new FeatureLayer({
        url: "https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads_Styled/FeatureServer/0",
      });
    
     // Add a graphics layer to hold features and draw data
    
      var graphicsLayer = new GraphicsLayer();
      map.add(graphicsLayer);
    
      function addGraphics(result) {
        graphicsLayer.removeAll();
        result.features.forEach(function(feature){
          var g = new Graphic({
            geometry: feature.geometry,
            attributes: feature.attributes,
            symbol: {
             type: "simple-marker",
              color: [0,0,0],
              outline: {
               width: 2,
               color: [0,255,255],
             },
              size: "20px"
            },
            popupTemplate: {
             title: "{TRL_NAME}",
             content: "This a {PARK_NAME} trail located in {CITY_JUR}."
            }
          });
          graphicsLayer.add(g);
        });
      }
    
      // Server-side query
    
      function queryFeatureLayer(point, distance, spatialRelationship, sqlExpression) {
        var query = {
          geometry: point,
          distance: distance,
          spatialRelationship: spatialRelationship,
          outFields: ["*"],
          returnGeometry: true,
          where: sqlExpression
        };
        featureLayer.queryFeatures(query).then(function(result) {
          addGraphics(result);
        });
      }  
        
      // Client-side query
    
      function queryFeatureLayerView(point, distance, spatialRelationship, sqlExpression){ 
        if (!map.findLayerById(featureLayer.id)) {
          featureLayer.outFields = ["*"];
          map.add(featureLayer,0);
        }
        var query = {
          geometry: point,
          distance: distance,
          spatialRelationship: spatialRelationship,
          outFields: ["*"],
          returnGeometry: true,
          where: sqlExpression
        };
        // Wait for the layerview to be ready and then query features
        view.whenLayerView(featureLayer).then(function(featureLayerView) {
          if (featureLayerView.updating) {
            var handle = featureLayerView.watch("updating", function(isUpdating){
              if (!isUpdating) {
                featureLayerView.queryFeatures(query).then(function(result) {
                  addGraphics(result) 
                });
                handle.remove();
              }
            });            
          } else {
            featureLayerView.queryFeatures(query).then(function(result) {
              addGraphics(result);
            });
          }
        });
      } 
    
      // CHALLENGE: Find a feature and show pop-ups (client-side)
    
      // view.when(function(){
      //   view.whenLayerView(featureLayer).then(function(featureLayerView) {
      //     view.on("pointer-move", function(event){
      //       view.hitTest(event).then(function(response){
      //         // Only return features for the feature layer
      //         var feature = response.results.filter(function (result) {
      //          return result.graphic.layer === featureLayer;
      //         })[0].graphic;
      //         if (feature) {
      //           // Show popup for new features only
      //           if (!view.popup.features.length || view.popup.features.length && (view.popup.features[0].attributes.FID !== feature.attributes.FID)) {
      //             view.popup.open({
      //               title: feature.attributes.TRL_NAME,
      //               content: "This a " + feature.attributes.PARK_NAME + " trail located in " + feature.attributes.CITY_JUR + ".",
      //               location: feature.geometry
      //             });
      //           }
      //         }
      //       });
      //     });
      //   });        
      // });

    });
    
  </script>
</head>

<body>
  <nav class="navbar navbar-expand-sm bg-light navbar-light">
    <!-- Logo -->
    <a class="navbar-brand" href="../index.html">GEOM99 Tutorial Demos</a>
  
    <!-- Links -->
    <ul class="navbar-nav">
  
      <!-- Dropdown -->
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbardrop" data-toggle="dropdown">
          Week 1</a>
        <div class="dropdown-menu">
          <a class="dropdown-item" href="../Week1/MyMaps.htm">MyMaps</a>
          <a class="dropdown-item" href="../Week1/MapsJS.htm">Maps JavaScript</a>
          <a class="dropdown-item" href="../Week1/Directions.htm">Directions</a>
          <a class="dropdown-item" href="../Week1/Places.htm">Places</a>
        </div>
      </li>

      <!-- Dropdown -->
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbardrop" data-toggle="dropdown">
          Week 2</a>
        <div class="dropdown-menu">
          <a class="dropdown-item" href="../Week2/AddMarker.htm">Add Marker</a>
          <a class="dropdown-item" href="../Week2/Clustering.htm">Clustering</a>
          <a class="dropdown-item" href="../Week2/Earthquakes.htm">Earthquakes</a>
          <a class="dropdown-item" href="../Week2/Heatmap.htm">Heatmap</a>
          <a class="dropdown-item" href="../Week2/Project.htm">Project</a>
        </div>
      </li>

      <!-- Dropdown -->
      <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbardrop" data-toggle="dropdown">
            Week 4 </a>
          <div class="dropdown-menu">
            <a class="dropdown-item" href="AccessService.htm">Access services with OAuth 2.0</a>
            <a class="dropdown-item" href="GetRouteandDirections.htm">Get a route and directions</a>
            <a class="dropdown-item" href="QueryFeatureLayer.htm">Query a feature layer</a>
          </div>
        </li>        

        <!-- Dropdown -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbardrop" data-toggle="dropdown">
            Week 6</a>
          <div class="dropdown-menu">
            <a class="dropdown-item" href="../Week6/CanadaMap.htm">Map of Canada</a>
          </div>
        </li> 
        
    </ul>
  </nav>
  
  <div class="container">
    <h1>ArcGIS DevLabs Tutorial 3: Query a feature layer</h1>
    <p>This tutorial executes server-side and client-side queries to find trailheads 
      that are within a distance of 1500 meters from the center of the map and where you click.</p>  
  </div>

  <div id="viewDiv"></div>

    <!-- Footer -->
    <footer class="page-footer font-small">
      <div class="footer-copyright text-center py-3">Created by Roshelle Chan | 
          <a href="https://developers.arcgis.com/labs/javascript/query-a-feature-layer/"> Tutorial Reference </a>
      </div>
    </footer></body>

</html>

